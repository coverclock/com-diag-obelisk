#!/bin/sh

### BEGIN INIT INFO
# Provides:        timeserver
# Required-Start:  $network $remote_fs $syslog
# Required-Stop:   $network $remote_fs $syslog
# Default-Start:   2 3 4 5
# Default-Stop:    1
# Short-Description: time service
### END INIT INFO

PATH=/sbin:/bin:/usr/sbin:/usr/bin/:/usr/local/bin

. /lib/lsb/init-functions

ENABLENTP=true

DAEMONG=/usr/local/sbin/gpsd
PIDFILEG=/var/run/gpsd.pid
DAEMONW=/usr/local/bin/wwvbtool
PIDFILEW=/var/run/wwvbtool.pid
DAEMONH=/home/pi/bin/hourglass.py
PIDFILEH=/var/run/hourglass.pid
DAEMONN=/usr/local/sbin/ntpd
PIDFILEN=/var/run/ntpd.pid

test -x $DAEMONG || exit 5
test -x $DAEMONW || exit 5
test -x $DAEMONH || exit 5

if $ENABNLENTP; then

	test -x $DAEMONN || exit 5

	LOCKFILE=/var/lock/ntpdate

	lock_ntpdate() {
		if [ -x /usr/bin/lockfile-create ]; then
			lockfile-create $LOCKFILE
			lockfile-touch $LOCKFILE &
			LOCKTOUCHPID="$!"
		fi
	}

	unlock_ntpdate() {
		if [ -x /usr/bin/lockfile-create ] ; then
			kill $LOCKTOUCHPID
			lockfile-remove $LOCKFILE
		fi
	}

	NTPD_OPTS="-g -N"

	RUNASUSER=ntp
	UGID=$(getent passwd $RUNASUSER | cut -f 3,4 -d:) || true
	if test "$(uname -s)" = "Linux"; then
		NTPD_OPTS="$NTPD_OPTS -u $UGID"
	fi

fi

ENDPOINT="127.0.0.1:60180"
PPS0="/dev/pps0"

WWVB_OPTS="-C -20 -N GP -U $ENDPOINT -n -p -l -u -r -i -s -a -b"
GPSD_OPTS="-b -r -n udp://$ENDPOINT $PPS0"

case $1 in
	start)

		# Set the system clock from the hardware clock.
		log_daemon_msg "Reading hardware clock" "timeservice"
		hwclock -u -s
		status=$?
		log_end_msg $status

		# Launch wwvbtool
		log_daemon_msg "Starting WWVB daemon" "timeservice"
		start-stop-daemon --start --quiet --oknodo --pidfile $PIDFILEW --startas $DAEMONW -- $WWVB_OPTS
		status=$?
		log_end_msg $status

		# Cheap way to allow the WWVB daemon to establish its UDP port.
		sleep 1

		# Launch gpsd
		log_daemon_msg "Starting GPS daemon" "timeservice"
		start-stop-daemon --start --quiet --oknodo --pidfile $PIDFILEG --startas $DAEMONG -- -P $PIDFILEG $GPSD_OPTS
		status=$?
		log_end_msg $status

		if $ENABLENTP; then
			# Launch ntpd
			lock_ntpdate
			log_daemon_msg "Starting NTP daemon" "timeservice"
			start-stop-daemon --start --quiet --oknodo --pidfile $PIDFILEN --startas $DAEMONN -- -p $PIDFILEN $NTPD_OPTS
			status=$?
			log_end_msg $status
			unlock_ntpdate
		fi

		# Launch hourglass
		log_daemon_msg "Starting LCD daemon" "timeservice"
		start-stop-daemon --start --quiet --oknodo --pidfile $PIDFILEH --startas $DAEMONH --make-pidfile --background --
		status=$?
		log_end_msg $status

		;;
	stop)

		log_daemon_msg "Stopping LCD daemon" "timeservice"
		start-stop-daemon --stop --quiet --oknodo --pidfile $PIDFILEH --remove-pidfile
		log_end_msg $?

		if $ENABLENTP; then
			log_daemon_msg "Stopping NTP daemon" "timeservice"
			start-stop-daemon --stop --quiet --oknodo --pidfile $PIDFILEN
			log_end_msg $?
		fi

		log_daemon_msg "Stopping GPS daemon" "timeservice"
		start-stop-daemon --stop --quiet --oknodo --pidfile $PIDFILEG
		log_end_msg $?

		log_daemon_msg "Stopping WWVB daemon" "timeservice"
		start-stop-daemon --stop --quiet --oknodo --pidfile $PIDFILEW
		log_end_msg $?

		log_daemon_msg "Writing hardware clock" "timeservice"
		hwclock -u -w
		status=$?
		log_end_msg $status

		rm -f $PIDFILEG
		rm -f $PIDFILEW
		rm -f $PIDFILEN
		rm -f $PIDFILEH
		;;

	restart|force-reload)
		$0 stop && sleep 2 && $0 start
		;;

	try-restart)
		if $0 status >/dev/null; then
			$0 restart
		else
			exit 0
		fi
		;;

	reload)
		exit 3
		;;

	status)
		status_of_proc $DAEMONG "time service"
		status_of_proc $DAEMONW "time service"
		$ENABLENTP && status_of_proc $DAEMONN "time service"
		status_of_proc $DAEMONH "time service"
		;;
	*)
		echo "Usage: $0 {start|stop|restart|try-restart|force-reload|status}"
		exit 2
		;;
esac

# end
